第8回 リストを作成する再帰関数

はじめに
* 前回はリストを引数に取る再帰関数について学んだ
* 今回はリストを返す再帰関数について学ぶ
* 「リスト」の回でやった3段階は
	1. enumerate
	2. map/filter
	3. accumulate
* そのうちの1. enumerateにあたる部分となる

[m .. n]
* まずは「リスト」の回で見た[m .. n]という構文を見よう
* これは構文糖であり以下の関数に変換される
	enumFromTo m n
* この関数を正しく理解するには型クラスの知識が必要なので
* ここではこの関数の型を以下のように考える
	enumFromTo :: Int -> Int -> [Int]

enumFromTo
* enumFromTo m nはmから1刻みでnまでのリストを返す関数
* 以下のように定義することができる
	enumFromTo m n
		| m > n = []
		| otherwise = m : enumFromTo (m + 1) n

試してみよう
* コマンドプロンプトを2こ立ち上げて
* lectures/lecture08ディレクトリを作成しそこに移動
* myList.hsを作成し以下を書き込もう
	myEnumFromTo :: Int -> Int -> [Int]
	myEnumFromTo m n
		| m > n = []
		| otherwise = m : myEnumFromTo (m + 1) n
* 試してみよう
	% ghci myList.hs
	*Main> myEnumFromTo 3 8

myEnumFromToの説明
* 定義を再掲する
	myEnumFromTo m n
		| m > n = []
		| otherwise = m : enumFromTo (m + 1) n
* これはこう読める
	1. 開始の値が終了の値より大きければ空リスト
	2. mからnまでの値のリストは
		(m + 1)からnまでの値のリストにmを追加したもの

enumFromTo(まとめ)
* [m .. n]という構文は構文糖であり
	-> enumFromTo m n
* enumFromTo m nは以下のように定義される
	1. m > nならば空リスト
	2. それ以外でm + 1からnのリストにmを追加したもの
* リストを作成する関数の多くが同様の枠組みで作られる
	- その関数自体の返り値に値を追加するという枠組み

コラッツの予想
* 正の整数nについて
	- nが偶数ならば2で割り
	- nが奇数ならば3をかけて1を足す
* これをくりかえし行うと、
* いつかは4 -> 2 -> 1 -> 4 -> 2 -> 1のループになる
* という予想
* まだ証明されていない
* 数学における未解決問題のひとつ
* 現在では3 * 2 ^ 53までのnで成り立つことが確認ずみ
	3 * 2 ^ 53 = 
	二京七千二十一兆五千九百七十七億六千四百二十二万二千九百七十六

コラッツの予想
* コラッツ数列というものを考える
	- 数nから始めて既述のルールで次を求めていき
	- 1が来たら終了とする数列
* コラッツ数列を求める関数を書いていこう
* この関数は2つの部分に分けることができる
	1. 既述のルールを適用し続ける無限リストを作る
	2. 上記のリストのうち最初に1が出るところまでとる
* 「くりかえし」の部分と終了条件とを分けた

最初の1までをとる
* 引数で指定された条件を満たすまでをとる関数
* この関数をtakeToとしよう
* この関数の入出力の型は
	- 入力1: a -> Bool
	- 入力2: [a]
	- 出力: [a]
	-> takeTo :: (a -> Bool) -> [a] -> [a]
* 中身について考えていこう

takeTo
* 空リストの場合は結果も空リストとなるので
	takeTo _ [] = []
* 残りのケースは
	リストの先頭が条件を満たす場合と満たさない場合
* 条件を満たした場合、その要素の後ろは捨てるので
	takeTo p (x : xs)
		| p x = [x]
* pを満たさない場合は
	- xsからpを満たす要素までを取り
	- そのリストにxを追加するので
		| otherwise = x : takeTo p xs

takeTo
* collatz.hsに書き込もう
	takeTo :: (a -> Bool) -> [a] -> [a]
	takeTo _ [] = []
	takeTo p (x : xs)
		| p x = [x]
		| otherwise = x : takeTo p xs
* 試してみよう
	*Main> :load collatz.hs
	*Main> takeTo even

前回の復習
* 定義をもう一度見てみよう
	takeTo _ [] = []
	takeTo p (x : xs)
		| p x = [x]
		| otherwise = x : takeTo p xs
* 以下のような関数を考える
	fun x lst = if p x then [x] else x : lst
* すると
	takeTo p (x : xs) = fun x (takeTo p xs)
	-> takeTo p (x : xs) = x `fun` takeTo p xs

前回の復習
* つまり以下のようになる
	(takeTo p) [] = []
	(takeTo p) (x : xs) = x `fun` (takeTo p) xs
* (takeTo p)は以下の変換を行う関数と見ることができる
	- []は[]にする
	- (:)をfunに置き換える
* このパターンはfoldrそのものなので
	takeTo p = foldr fun []
* fun x lst = if p x then [x] else x : lstなので
	takeTo p = foldr
		(\\x lst -> if p x then [x] else x : lst) []

蛇足
* ちなみにfunを以下のように書き換えることができる
	\\x lst -> if p x then [x] else x : lst
	-> \\x -> if p x then \\_ -> [x] else (x :)
* (\\_ -> c)は引数に関わらず一定の値を返す関数
* そのような関数を作る関数constがある
	const c = \\_ -> c
* それを使って書き換えると
	-> \\x -> if p x then const [x] else (x :)

蛇足の説明
* 見くらべてみる
	\\x lst -> if p x then [x] else x : lst
	\\x -> if p x then const [x] else (x :)
* Haskellに慣れてくると後者のほうが「美しく」感じる
* lstという変数はfooでもbarでも何でも良い
* lstという名前を選んだのは恣意的な選択である
* よってそのような「恣意性」が減少する後者のほうが美しい
* 仮引数を使わないスタイルをポイントフリースタイルと呼ぶ
* ポイントフリースタイルを適度に使うとコードが引きしまる

重複をなくす
* さっきの定義をもう一度見てみよう
	\\x -> if p x then const [x] else (x :)
* [x]は(x : [])なので(x :)が重複している
* 以下のようにすると重複をなくすことができる
	\\x -> (x :) . if p x then const [] else id
* idは入力をそのまま出力とする関数
	id x = x

試してみよう
* collatz.hsに書き込もう
	takeTo' :: (a -> Bool) -> [a] -> [a]
	takeTo' p = flip foldr [] $
		\\x -> (x :) . if p x then const [] else id
		-- flipは引数の順番を入れ換える関数
		-- それと($)を使うことで()を減らしてみた
* 試してみる
	*Main> :reload
	*Main> takeTo' even

ポイントフリー狂
* takeToを完全にポイントフリースタイルで書くとこうなる
	takeTo = flip foldr [] .
		((.) <$> (:) <*>) .
		((([id, const []] !!) . fromEnum) .)
* ポイントフリースタイルを「適度に」使うとわかりやすく
* 「適度に」使うとわかりやすく
* 「適度に」使おう

最初の1までをとる(まとめ)
* 条件を満たす最初の要素までをとる関数takeToを作った
* まずは再帰的な定義で書いてみた
* (:)を置き換える関数を考えることで
	- foldrを使った定義に書き換えてみた
* ポイントフリースタイルについて触れた
	- ポイントフリースタイルはコードから贅肉をおとす
	- やりすぎるとパズルになる
* takeToを使うとリストから最初の1までをとる処理は
	takeTo (== 1) [...]

前の値から次の値を作る
* ここからが本題
* コラッツ数列の作りかたを再掲する
	- nが偶数ならば2で割り
	- nが奇数ならば3をかけて1を足す
* 前の値から次の値を求める関数
	collatzNext :: Int -> Int
	collatzNext n
		| even n = n `div` 2
		| otherwise = n * 3 + 1

無限数列を作る
* 以下のようにして無限数列を作る
	collatzInf :: Int -> [Int]
	collatzInf n = n : collatzInf (collatzNext n)
* nから始まる数列はnの次から始まる数列にnを追加したもの
* 結果は以下のような数列になる
	[n, collatzNext n, collatzNext (collatzNext n) ...]
* これを一般化すると
	[x, f x, f (f x), f (f (f x)), f (f (f (f x))) ...]
* このような列はしばしば使われるので関数が用意されている
* 上の[x, f x, ...]はiterate f xで表すことができる

無限数列を作る
* iterateを使うと以下のようにできる
	collatzInf = iterate collatzNext
* collatzNextを展開すると
	collatzInf = iterate $ \\n -> if even n
		then n `div` 2
		else n * 3 + 1

試してみる
* collatz.hsに書き込もう
	collatzInf :: Int -> [Int]
	collatzInf = iterate $ \\n -> if even n
		then n `div` 2
		else n * 3 + 1
* 試してみよう
	*Main> :reload
	*Main> take 10 $ collatzInf

iterate
* ここでiterateの定義を見てみよう
* 型は以下のようになる
	iterate :: (a -> a) -> a -> [a]
* 定義は以下のようになる
	iterate f x = x : iterate f (f x)
* xに次々とfを適用していってできるリストは
	- (f x)に次々とfを適用していってできるリストに
	- xを追加したもの

無限数列(まとめ)
* 次の値が前の値に関数fを適用したものであるようなリスト
* そのようなリストは以下のようにして作ることができる
	mkSomeList x = x : mkSomeList (f x)
* この枠組みを関数として取り出したものがiterate関数
	iterate f x
	-> [x, f x, f (f x), f (f (f x)) ...]

コラッツ数列
* 1で終了するようにしよう
	collatz :: Int -> [Int]
	collatz = takeTo (== 1) . collatzInf
* これをcollatz.hsに書き込もう
* 試してみる
	*Main> :reload
	*Main> collatz 11

コラッツ数列(まとめ)
* コラッツ数列を返す関数を作った
* 無限数列を作ってから必要な部分を取り出した
	- 「次々に値を生成する」部分と
	- 「終了条件」とを分けることができた
* 条件を満たすまでを取り出す関数を作った
	- 復習のためにfoldrで書き直した
	- ポイントフリースタイルの深渕をのぞいた
* 「値に次々と関数を適用する」という枠組みについて学んだ
	- その枠組みは関数iterateによって抽象化されている

素因数分解
* 素因数分解の例について見ていこう
* 素因数分解とは数を素数の積で表現すること
	420 = 2 * 2 * 3 * 5 * 7
* 素因数分解は桁が大きくなると計算量が増加する
* 大きな値を素因数分解する効率的なアルゴリズムはない
	-> むしろ、それを利用したのがRSA暗号

Int型
* あまり大きな素数は扱わない
* ある程度の大きさの合成数は扱う
* 今までは整数としてInt型の値を使ってきたが
	- Intは処理系依存のサイズの整数型
	- 仕様ではすくなくとも以下の範囲が表現可能とされる
		- 2 ^ 29から2 ^ 29 - 1
* 自分の処理系のInt型の値の範囲は以下のように確かめられる
	*Main> (minBound, maxBound) :: (Int, Int)

Int型
* 実はInt型は大きな値に対しては安全ではない
	*Main> maxBound :: Int
	*Main> maxBound + 1 :: Int
* Int型はmaxBoundとminBoundとがつながった円環構造
* そういうものとして考える必要がある

Integer型
* Haskellにはより安全なInteger型がある
* メモリが許すかぎりの大きさの整数を扱うことができる
* 試してみよう
	*Main> 2 ^ 128
	*Main> product [1 .. 100]
* 今回の例にはInteger型の値を使うことにする

戦略
* 問題を以下のように分割する
	1. 整数を2以上の最小の約数と残りの数に分ける
	2. 1を残りの数についてくりかえす
* まずは1.の整数を分ける関数について見ていこう

整数を分ける
* 効率のことは考えずに単純な実装とする
* nを引数として以下を求める関数を作る
	1. 2から数nまでのリストを作る
	2. それらでnを割り0になるものだけを集める
	3. その先頭の要素をとる
* 以下のようになる
popFactor :: Integer -> Maybe (Integer, Integer)
popFactor 1 = Nothing
popFactor n = Just (f, n `div` f)
	where
	f = head $ filter ((== 0) . (n `mod`)) [2 .. n]

整数を分割する
* 返り値をMaybeとしたことについて
	- popFactor 1 = (1, 1)とすることもできたが
	- 「残り」が変化しなくなると無限ループになる
	- よってNothingとして終了条件を明確にした
* filterの部分を説明しよう
	filter ((== 0) . (n `mod`))
* これはポイントフリーでないスタイルで書くとこうなる
	filter (\\x -> n `mod` x == 0)
* つまりnを割った余りが0になるxを取り出すということ

試してみる
* factorization.hsに以下を書き込もう
popFactor :: Integer -> Maybe (Integer, Integer)
popFactor n = (f, n `div` f)
	where
	f = head $ filter ((== 0) . (n `mod`)) [2 .. n]
* 試してみよう
	*Main> :load factorization.hs
	*Main> popFactor
	*Main> popFactor

素因数分解
* 最小の因数と残りに分ける関数ができた
* これを使って素因数分解するためには
	- 結果がNothingだったら空リスト
	- そうでなければJust (f, n')として
		n'の素因数分解の結果にfを追加すれば良い
* よって以下のようになる
	factorization :: Integer -> [Integer]
	factorization n = case popFactor n of
		Nothing -> []
		Just (f, n') -> f : factorization n'

iterateの枠組みとの比較
* iterateの場合
	- 次々にわたしていく値と
	- 結果としてリストに入る値とは同じ
* collatz数列の例で考えると
	- 5の次の値は16だが、この16は
	- 結果のリストに入り、かつ
	- 残りの値を求めるのに使われる

iterateの枠組みとの比較
* 素因数分解の例では
	- リストに入るのは最小の約数
	- 次の値に必要なのは、残りの数
	- リストの終了はNothingで示される
* この枠組みを表す関数unfoldrがある

unfoldr
* factorizationの定義を再掲する
	factorization n = case popFactor n of
		Nothing -> []
		Just (f, n') -> f : factorization n'
* より一般的に書くと
	fun x = case next x of
		Nothing -> []
		Just (r, x') -> r : fun x'
* nextの部分を変えていろいろな関数が作れる
* unfoldr nextでこれを表現できる

unfoldr
* unfoldrの定義は以下のようになる
	unfoldr :: (b -> Maybe (a, b)) -> b -> [a]
	unfoldr next x = case next x of
		Nothing -> []
		Just (r, x') -> r : unfoldr next x'
* unfoldrを使うとfactorizationは以下のようになる
	factorization = unfoldr popFactor

試してみる
* factorization.hsに書き込もう
	factorization :: Integer -> [Integer]
	factorization = unfoldr popFactor
* factorization.hsの先頭にimport Data.List (unfoldr)が必要
* 試してみよう
	*Main> :reload
	*Main> factorization
	*Main> factorization
* 適当な値を入れると評価に時間がかかりすぎる場合がある

素因数分解(まとめ)
* 素因数分解する関数を定義した
* unfoldrを利用した
* unfoldrは以下のような関数を引数としてとる
	- 次が存在しないことをNothingで表す
	- 値に対して(結果, 次の値)のペアを返す
* unfoldrは「結果の値」を要素とするリストを返す

まとめ
* リストを構成する再帰関数について見た
* その関数の返り値自体に値を追加するという定義
* そのような関数の多くは以下のような構造を持つ
	[x, f x, f (f x), f (f (f x)) ... ]
* このような構造はiterate f xで表現できる
* 「結果」と「次の値」が違う場合iterateは使えない
* このような場合にはunfoldrが使える
* unfoldrは以下の関数を引数としてとる
	- 次の値が存在しない場合はNothing
	- 存在するなら(結果, 次の値)ペアを返す
