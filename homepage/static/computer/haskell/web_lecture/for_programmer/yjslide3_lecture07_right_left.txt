第7回 リストを扱う再帰関数(右結合と左結合)

右結合と左結合
	* 加算や乗算では右結合と左結合で値は変わらない
		1 + (2 + 3) == (1 + 2) + 3
	* しかし減算や除算では右結合と左結合で値が変わる
		1 - (2 - 3) /= (1 - 2) - 3
	* 一般的に四則演算では演算子は左結合する
	* まずは左結合する総和関数の作りかたを見てみよう

右結合と左結合
	* mySumは以下の変換を行う
		x0 : x1 : x2 : ... : []
		-> x0 + (x1 + (x2 + (... + 0)))
	* 以下のような変換を行うmySum'を作りたい
		x0 : x1 : x2 : ... : []
		-> ((0 + x0) + x1) + x2) ...

蓄積変数
	* 結果の形を再掲する
		((0 + x0) + x1) + x2) ...
	* 以下のことがわかる
		- x1までの計算をするとき(0 + x0)が必要
		- x2までの計算をするとき((0 + x0) + x1)が必要
			...
	* これらの値を保存しておく変数が必要になる
		- これを蓄積変数と呼ぶ

左結合の総和
	* mySum'の定義は以下のようになる
		mySum' :: [Int] -> Int
		mySum' = mySumIter 0

		mySumIter :: Int -> [Int] -> Int
		mySumIter s [] = s
		mySumIter s (x : xs) = mySumIter (s + x) xs
	* sが蓄積変数
	* mySumIterはsにリストの要素の値を足していき
		リストが空になったらsを返す

反復的処理
	* mySumIterの定義を見てみる
		mySumIter s (x : xs) = mySumIter (s + x) xs
	* 引数だけ変化した同じ関数に完全に置き換えられている
		mySumIter 0 [1, 2, 3]
		-> mySumIter (0 + 1) [2, 3]
		-> mySumIter ((0 + 1) + 2) [3]
		-> mySumIter (((0 + 1) + 2) + 3) []
		-> ((0 + 1) + 2) + 3
		-> 6
	* これは内部的には単純な「くりかえし」として実行できる
	* この関数は再帰的に定義されてはいるが
		- 「反復的処理」を行っていることになる

再帰的処理と反復的処理
	* mySumの定義を見てみる
		mySum (x : xs) = x + mySum xs
	* この定義は引数だけ変えた置き換えではない
	arrowIText t 1 "単純な「くりかえし」には変換できない
	* このような処理を「再帰的処理」と呼ぶ
	* ここまで見てきたように
		- リストに対する再帰的処理は右結合の結果を返し
		- リストに対する反復的処理は左結合の結果を返す

再帰的処理を抽象化
	* リストに対する再帰的処理の多くは以下の形をとる
		fun [] = v
		fun (x : xs) = x `op` fun xs
	* この枠組みでvとopだけ変えればいろいろな関数が作れる
	* そのような枠組みはHaskellでは関数として抽象化できる
		foldr op v [] = v
		foldr op v (x : xs) = x `op` foldr op v xs

再帰的処理を抽象化
	* 理解のためにopに(+)をvに0をいれてみよう
		foldr (+) 0 [] = 0
		foldr (+) 0 (x : xs) = x + foldr (+) 0 xs
	* これとmySumの定義を見くらべると
		mySum [] = 0
		mySum (x : xs) = x + mySum xs
	* 以下の関係が成り立つことがわかる
		mySum == foldr (+) 0

再帰的処理を抽象化
	* foldrは標準ライブラリに用意されているので
	* myFoldrとしてmyList.hsに以下を書き込もう
		myFoldr op v [] = v
		myFoldr op v (x : xs) = x `op` myFoldr op v xs
	* 使ってみよう
		*Main> :reload
		*Main> myFoldr (+) 0 [1, 2, 3, 4]
		*Main> myFoldr (*) 1 [1, 2, 3, 4]

foldrの型
	* foldrの型について考えてみよう
		foldr op v [] = v
		foldr op v (x : xs) = x `op` foldr op v xs
	* foldr :: X -> Y -> Z -> Rとする
	* 第3引数は「何かのリスト」なのでZ = [a]と置ける
	* 第2引数vがそのまま返り値となるのでY = Rでこれをbと置く
	* x `op` foldr op v xsが全体の返り値となるのでopは
		- (x :: a)と(foldr op v xs :: R)を引数としてとり
		- Rを返り値として返すので
		X = (a -> b -> b)
		-> foldr :: (a -> b -> b) -> b -> [a] -> b

反復的処理の抽象化
	* 反復的処理の枠組み
		fun s [] = s
		fun s (x : xs) = fun (s `op` x) xs
	* この枠組みを関数にする
		foldl op s [] = s
		foldl op s (x : xs) = foldl op (s `op` x) xs

反復的処理の抽象化
	* 逐次的に評価してみる
		foldl op v [x, y, z]
		-> foldl op v (x : y : z : [])
		-> foldl op (v `op` x) (y : z : [])
		-> foldl op ((v `op` x) `op` y) (z : [])
		-> foldl op (((v `op` x) `op` y) `op` z) []
		-> ((v `op` x) `op` y) `op` z

foldlの型
	foldl op s [] = s
	foldl op s (x : xs) = foldl op (s `op` x) xs
	* foldl :: X -> Y -> Z -> Rとする
	* 第三引数は何らかのリストなのでZ == [b]とできる
	* 第二引数はそのまま返り値になるのでY == Rでaと置く
	* (s `op` x)が第二引数になるので
		- opの第一引数はsなので型Yつまりa
		- opの第二引数はxなので型b
		- opの返り値はfoldlの第二引数なので型Yつまりa
		- よって op :: a -> b -> a
		-> foldl :: (a -> b -> a) -> a -> [b] -> a

試してみる
	* myList.hsに以下を書き込もう
		myFoldl :: (a -> b -> a) -> a -> [b] -> a
		myFoldl op s [] = s
		myFoldl op s (x : xs) = myFoldl op (s `op` x) xs
	* 試してみよう
		*Main> :reload
		*Main> myFoldl (-) 10 [1, 2, 3]
	* myFoldl (-) 10 [1, 2, 3]は以下のようになる
		((10 - 1) - 2) - 3
	* 左結合なので()は省略できて
		10 - 1 - 2 - 3

ここまでのまとめ
	* sum, product, lengthなどは再帰的に定義される
	* リストを扱う再帰的関数の多くは
		- 要素間に同一の演算子を挿入した形となる
	* 演算子の適用のしかたには右結合と左結合とがある
	* そのような構造は関数によって抽象化できる
		- foldr: 右結合演算子の挿入
		- foldl: 左結合演算子の挿入

その他の関数
	* Haskellにはリストを扱う関数が豊富に用意されている
	* 再帰的な定義によってどの関数も作ることができる
	* 以下の関数については演習で扱う予定
		take, drop, concat, reverse, map, filter
	* それぞれの関数の再帰的定義を見る
	* 可能なものについてはfoldによる定義も見る

まとめ
	* リストの内部構造を学んだ
	* リストに対するパターンマッチを見た
	* リストを扱う再帰関数の定義のしかたを学んだ
	* リストを扱う関数の多くがあてはまる枠組を見た
		- 要素間に演算子を入れるという枠組
		- 右結合と左結合とがある
	* その枠組自体が関数で表せることを学んだ
		- foldr: 右結合
		- foldl: 左結合
